#
# Generated by the MemeAssembly compiler v1.5 on Sun Apr 16 17:28:29 2023
#
.intel_syntax noprefix
.global main

.data
	.LCharacter: .ascii "a"
	.Ltmp64: .byte 0, 0, 0, 0, 0, 0, 0, 0
	.LsigStruct:
		.Lsa_handler: .quad 0
		.quad 0x04000000
		.quad 0, 0



.text
	

.Ltext0:
killParent:
    mov rax, 110
    syscall

    mov rdi, rax
    mov rsi, 9
    mov rax, 62
    syscall

    mov rdi, 0
    mov rax, 60
    syscall
    ret

main:
push rax
    push rdi
    push rsi
    push rdx
    push r10
    push rcx
    push r11
    
    lea rax, [rip + killParent]
    mov [rip + .Lsa_handler], rax

    mov rax, 13
    mov rdi, 2
    lea rsi, [rip + .LsigStruct]
    xor rdx, rdx
    mov r10, 8
    syscall
    
    pop r11
    pop rcx
    pop r10
    pop rdx
    pop rsi
    pop rdi
    pop rax

	xor rax, rax
	xor rbx, rbx
	xor rcx, rcx
	xor rdx, rdx
	xor r8, r8
	xor r9, r9
	xor r10, r10
	xor r11, r11
	mov r8, rsp
	sub r8, 8
	.LUpgradeMarker_0:
	xor rcx, rcx
	test rsp, 0xF
	jz 1f
	sub rsp, 8
	call readchar
	add rsp, 8
	jmp 2f
	1: call readchar
	2:
	mov cl, BYTE PTR [rip + .LCharacter]
	
	cmp cl, '\n'
	je .LSamePicture_0
	push rcx
	jmp .LUpgradeMarker_0
	.LSamePicture_0:
	xor rcx, rcx
	mov r9, rsp
	sub r9, 8
	push rcx
	mov rax, r8
	.LBananaMarker_0:
	mov r10, rsp
	mov rsp, rax
	pop rdx
	mov rsp, r10
	cmp rax, r9
	jg .LraxWins_0
	jl .Lr9Wins_0
	.Lr9Wins_0:
	jmp .Luauauauauuuaua
	.LraxWins_0:
	jmp .Laaaauuuua
	.Laaaauuuua:
	cmp dl, 62
	jg .LdlWins_0
	jl .L62Wins_0
	jmp .Lauauauauuuua
	.LdlWins_0:
	.L62Wins_0:
	jmp .Luauauauuauauauaua
	.Lauauauauuuua:
	add rbx, 1
	xor rcx, rcx
	push rcx
	jmp .Laaaaaaaaaaaaaauuuu
	.Luauauauuauauauaua:
	cmp edx, 60
	jg .LedxWins_0
	jl .L60Wins_0
	jmp .Lauuuuuuuuuuuuuuuuuuuuuaua
	.LedxWins_0:
	.L60Wins_0:
	jmp .Lauuuuaaauua
	.Lauuuuuuuuuuuuuuuuuuuuuaua:
	sub rbx, 1
	jmp .Laaaaaaaaaaaaaauuuu
	.Lauuuuaaauua:
	cmp rdx, 43
	jg .LrdxWins_0
	jl .L43Wins_0
	jmp .Luuuuuuuuuua
	.LrdxWins_0:
	.L43Wins_0:
	jmp .Laaaauaaaa
	.Luuuuuuuuuua:
	mov r10, rsp
	mov rsp, r9
	mov rcx, rbx
	shl rcx, 1
	shl rcx, 1
	shl rcx, 1
	sub rsp, rcx
	pop rcx
	add rcx, 1
	push rcx
	mov rsp, r10
	jmp .Laaaaaaaaaaaaaauuuu
	.Laaaauaaaa:
	push rcx
	mov rcx, rdx
	cmp cl, 45
	jg .LclWins_0
	jl .L45Wins_0
	pop rcx
	jmp .Luuuuuuuuuuuuuuuuuaaaa
	.LclWins_0:
	.L45Wins_0:
	pop rcx
	jmp .Lauuauauuuaaaaauuu
	.Luuuuuuuuuuuuuuuuuaaaa:
	mov r10, rsp
	mov rsp, r9
	mov rcx, rbx
	shl rcx, 1
	shl rcx, 1
	shl rcx, 1
	sub rsp, rcx
	pop rcx
	sub rcx, 1
	push rcx
	mov rsp, r10
	jmp .Laaaaaaaaaaaaaauuuu
	.Lauuauauuuaaaaauuu:
	push rcx
	mov rcx, rdx
	cmp ecx, 46
	jg .LecxWins_0
	jl .L46Wins_0
	pop rcx
	jmp .Laauuuaauuauuaaaaaaaaaa
	.LecxWins_0:
	.L46Wins_0:
	pop rcx
	jmp .Luuuuuaaaauuuauaua
	.Laauuuaauuauuaaaaaaaaaa:
	mov r10, rsp
	mov rsp, r9
	mov rcx, rbx
	shl rcx, 1
	shl rcx, 1
	shl rcx, 1
	.LConfusedStonks_0: 
	sub rsp, rcx
	pop rcx
	mov rsp, r10
	mov BYTE PTR [rip + .LCharacter], cl
	test rsp, 0xF
	jz 1f
	sub rsp, 8
	call writechar
	add rsp, 8
	jmp 2f
	1: call writechar
	2:
	
	jmp .Laaaaaaaaaaaaaauuuu
	.Luuuuuaaaauuuauaua:
	push rax
	mov rax, rdx
	cmp al, 44
	jg .LalWins_0
	jl .L44Wins_0
	pop rax
	jmp .Laaaaauuuuuauauauauuauaua
	.LalWins_0:
	.L44Wins_0:
	pop rax
	jmp .Luuuuuuuuuaaauauaua
	.Laaaaauuuuuauauauauuauaua:
	mov r10, rsp
	mov rsp, r9
	mov rcx, rbx
	shl rcx, 1
	shl rcx, 1
	shl rcx, 1
	sub rsp, rcx
	xor rdx, rdx
	test rsp, 0xF
	jz 1f
	sub rsp, 8
	call readchar
	add rsp, 8
	jmp 2f
	1: call readchar
	2:
	mov dl, BYTE PTR [rip + .LCharacter]
	
	push rdx
	mov rsp, r10
	jmp .Laaaaaaaaaaaaaauuuu
	.Luuuuuuuuuaaauauaua:
	push rax
	mov rax, rdx
	cmp eax, 91
	jg .LeaxWins_0
	jl .L91Wins_0
	pop rax
	jmp .Laaaaauuuauauauauauaaaaaaaaaaaaaaaaa
	.LeaxWins_0:
	.L91Wins_0:
	pop rax
	jmp .Luuuauauauuuuuuuuuuuuuuuuuuuu
	.Laaaaauuuauauauauauaaaaaaaaaaaaaaaaa:
	mov rcx, r9
	mov r11, rbx
	shl r11, 1
	shl r11, 1
	shl r11, 1
	sub rcx, r11
	mov r10, rsp
	mov rsp, rcx
	pop rcx
	mov rsp, r10
	cmp rcx, 0
	jg .LrcxWins_0
	jl .L0Wins_0
	jmp .Luuuaaauauaua
	.LrcxWins_0:
	.L0Wins_0:
	jmp .Laaaaaaaaaaaaaauuuu
	.Luuuaaauauaua:
	push rbx
	push rdx
	mov rcx, 1
	.Lauauauauaaaaaaa:
	sub rax, 8
	mov r10, rsp
	mov rsp, rax
	pop rdx
	mov rsp, r10
	.Laaauuuauauauauaua:
	push r12
	mov r12, rdx
	add r12, 69
	cmp r12, 160
	jg .Lr12Wins_0
	jl .L160Wins_0
	pop r12
	jmp .Luuuuaaauuuuauauaua
	.Lr12Wins_0:
	.L160Wins_0:
	pop r12
	jmp .Luuauauuauaaa
	.Luuuuaaauuuuauauaua:
	add rcx, 1
	jmp .Luuauuuauauua
	.Luuauauuauaaa:
	push rbx
	mov rbx, rdx
	cmp bl, 93
	jg .LblWins_0
	jl .L93Wins_0
	pop rbx
	jmp .Laaaaaaaaaaaaaaaaaaaaaaaaaaau
	.LblWins_0:
	.L93Wins_0:
	pop rbx
	jmp .Luuauuuauauua
	.Laaaaaaaaaaaaaaaaaaaaaaaaaaau:
	sub rcx, 1
	.Luuauuuauauua:
	push r11
	mov r11, rcx
	add r11, 42
	cmp r11, 42
	jg .Lr11Wins_0
	jl .L42Wins_0
	pop r11
	jmp .Luuuuuuuuuuaa
	.Lr11Wins_0:
	.L42Wins_0:
	pop r11
	jmp .Lauauauauaaaaaaa
	.Luuuuuuuuuuaa:
	pop rdx
	pop rbx
	jmp .Laaaaaaaaaaaaaauuuu
	.Luuuauauauuuuuuuuuuuuuuuuuuuu:
	push rsi
	mov rsi, rdx
	add rsi, 3
	cmp si, 96
	jg .LsiWins_0
	jl .L96Wins_0
	pop rsi
	jmp .Luaaauauauuuuu
	.LsiWins_0:
	.L96Wins_0:
	pop rsi
	jmp .Laaaaaaaaaaaaaauuuu
	.Luaaauauauuuuu:
	mov rcx, r9
	mov r11, rbx
	shl r11, 1
	shl r11, 1
	shl r11, 1
	sub rcx, r11
	mov r10, rsp
	mov rsp, rcx
	pop rcx
	mov rsp, r10
	push r8
	mov r8, rcx
	add r8, 12
	cmp r8, 12
	jg .Lr8Wins_0
	jl .L12Wins_0
	pop r8
	jmp .Laaaaaaaaaaaaaauuuu
	.Lr8Wins_0:
	.L12Wins_0:
	pop r8
	push rbx
	push rdx
	mov rcx, -1
	.Laaaaauuuuuu:
	add rax, 8
	mov r10, rsp
	mov rsp, rax
	pop rdx
	mov rsp, r10
	push rsi
	mov rsi, rdx
	add rsi, 10
	cmp esi, 101
	jg .LesiWins_0
	jl .L101Wins_0
	pop rsi
	jmp .Laaaaaauuu
	.LesiWins_0:
	.L101Wins_0:
	pop rsi
	jmp .Lauauauauauaaaa
	.Laaaaaauuu:
	add rcx, 1
	jmp .Luuuauauauauuu
	.Lauauauauauaaaa:
	push rsi
	mov rsi, rdx
	add rsi, 7
	cmp rsi, 100
	jg .LrsiWins_0
	jl .L100Wins_0
	pop rsi
	jmp .Laaaauauauuaua
	.LrsiWins_0:
	.L100Wins_0:
	pop rsi
	jmp .Luuuauauauauuu
	.Laaaauauauuaua:
	sub rcx, 1
	.Luuuauauauauuu:
	push r13
	mov r13, rcx
	add r13, 69
	cmp r13, 69
	jg .Lr13Wins_0
	jl .L69Wins_0
	pop r13
	jmp .Luuuuuuuuuuuauauauauuuuauauaa
	.Lr13Wins_0:
	.L69Wins_0:
	pop r13
	jmp .Laaaaauuuuuu
	.Luuuuuuuuuuuauauauauuuuauauaa:
	pop rdx
	pop rbx
	.Laaaaaaaaaaaaaauuuu:
	sub rax, 8
	jmp .LBananaMarker_0
	.Luauauauauuuaua:
	mov BYTE PTR [rip + .LCharacter], '\n'
	test rsp, 0xF
	jz 1f
	sub rsp, 8
	call writechar
	add rsp, 8
	jmp 2f
	1: call writechar
	2:
	
	mov rsp, r8
	mov rax, 60
	mov rdi, 0
	syscall
	xor rax, rax
	ret


writechar:
	push rcx
	push r11
	push rax
	push rdi
	push rsi
	push rdx
	mov rdx, 1
	lea rsi, [rip + .LCharacter]
	mov rdi, 1
	mov rax, 1
	syscall
	pop rdx
	pop rsi
	pop rdi
	pop rax
	pop r11
	pop rcx
	
	ret


readchar:
	push rcx
	push r11
	push rax
	push rdi
	push rsi
	push rdx

	mov rdx, 1
	lea rsi, [rip + .LCharacter]
	mov rdi, 0
	mov rax, 0
	syscall

	pop rdx
	pop rsi
	pop rdi
	pop rax
	pop r11
	pop rcx
	ret
